{
  "active": false,
  "connections": {
    "Scheduler1": {
      "main": [
        [
          {
            "node": "Configure Event Name",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Auth Token": {
      "main": [
        [
          {
            "node": "Get Notification eventpath",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notification eventpath": {
      "main": [
        [
          {
            "node": "Resource Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Resource Config": {
      "main": [
        [
          {
            "node": "Get List of Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get List of Files": {
      "main": [
        [
          {
            "node": "Get File Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Event Process": {
      "main": [
        [
          {
            "node": "File Download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Event Process Data": {
      "main": [
        [
          {
            "node": "Save Event Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File Path": {
      "main": [
        [
          {
            "node": "Get Event Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Download": {
      "main": [
        [
          {
            "node": "Fetch Notification Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Notification Data": {
      "main": [
        [
          {
            "node": "Process Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Event Name": {
      "main": [
        [
          {
            "node": "Fetch Auth Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Items": {
      "main": [
        [
          {
            "node": "Save Event Process Item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Event Process Item": {
      "main": [
        [
          {
            "node": "Address Matching Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Address Matching Request": {
      "main": [
        [
          {
            "node": "Address Matching",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write File Name & Event Name": {
      "main": [
        [
          {
            "node": "Trigger Generate PDF Flow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Address Matching": {
      "main": [
        [
          {
            "node": "Set Event Process ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Event Process ID": {
      "main": [
        [
          {
            "node": "Event Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Event Process Data": {
      "main": [
        [
          {
            "node": "Write File Name & Event Name",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update Event Process Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Event Process Request": {
      "main": [
        [
          {
            "node": "Update Event Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Generate PDF Flow": {
      "main": [
        [
          {
            "node": "Get File Path To Move",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items Count",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File Path To Move": {
      "main": [
        [
          {
            "node": "Move Processed File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items Count": {
      "main": [
        [
          {
            "node": "Trigger Compress As Tar Flow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2023-03-10T09:19:18.590Z",
  "id": "27",
  "name": "My workflow 5",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -2940,
        -320
      ]
    },
    {
      "parameters": {
        "protocol": "sftp",
        "operation": "rename",
        "oldPath": "={{$node[\"Get Notification eventpath\"].json[\"data\"][0][\"path\"]}}{{$json[\"name\"]}}",
        "newPath": "={{$node[\"Get Notification eventpath\"].json[\"data\"][0][\"path\"]}}processed/{{$json[\"name\"]}}"
      },
      "name": "Move Processed File1",
      "type": "n8n-nodes-base.ftp",
      "typeVersion": 1,
      "position": [
        -1660,
        420
      ],
      "credentials": {
        "sftp": {
          "id": "9",
          "name": "SFTP account"
        }
      }
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        }
      },
      "name": "Scheduler1",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -2600,
        -380
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api-ga-medredtrmn-dev.cardinality.info/api/org/auth/login",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\"email\":\"vimalathithan@cardinality.ai\",\"password\":\"Password@123\",\"secret\":\"\"}"
      },
      "name": "Fetch Auth Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2040,
        -380
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "=https://api-ga-medredtrmn-dev.cardinality.info/api/notification/eventpath?eventname={{$node[\"Configure Event Name\"].json[\"eventname\"]}}",
        "jsonParameters": true,
        "options": {}
      },
      "name": "Get Notification eventpath",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1720,
        -380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "3",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "url": "https://api-ga-medredtrmn-dev.cardinality.info/api/emailtemplate/resources/getCredentialsByName/FTP SERVER",
        "options": {}
      },
      "name": "Resource Config",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1460,
        -380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "3",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "protocol": "sftp",
        "operation": "list",
        "path": "={{$node[\"Get Notification eventpath\"].json[\"data\"][0][\"path\"]}}"
      },
      "name": "Get List of Files",
      "type": "n8n-nodes-base.ftp",
      "typeVersion": 1,
      "position": [
        -1180,
        -380
      ],
      "credentials": {
        "sftp": {
          "id": "9",
          "name": "SFTP account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://api-ga-medredtrmn-dev.cardinality.info/api/emailtemplate/event-process",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{JSON.stringify($json)}}"
      },
      "name": "Save Event Process",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2040,
        -120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "3",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "var data={};\nconst currentDate = new Date();\nitems.map(item=>{\nconsole.log(item.json);\n  data = {\n  filename : $node[\"Get File Path\"].json.name,\n  process_begin : currentDate ,\n  process_end : null,\n  event_id : 1,\n  status: \"IN PROGRESS\"\n  }\n  \n})\nreturn [{\"json\": data}]\n"
      },
      "name": "Get Event Process Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2340,
        -120
      ]
    },
    {
      "parameters": {
        "functionCode": "const filteredFiles = [];\n\nfor (const file of items) {\n  if (file.json.name.endsWith('.xlsx')) {\n    filteredFiles.push(file);\n  }\n}\n\nreturn filteredFiles;\n"
      },
      "name": "Get File Path",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2620,
        -120
      ]
    },
    {
      "parameters": {
        "protocol": "sftp",
        "path": "={{$node[\"Get File Path\"].json[\"path\"]}}"
      },
      "name": "File Download",
      "type": "n8n-nodes-base.ftp",
      "typeVersion": 1,
      "position": [
        -1780,
        -120
      ],
      "credentials": {
        "sftp": {
          "id": "9",
          "name": "SFTP account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "name": "Fetch Notification Data",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 1,
      "position": [
        -1500,
        -120
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "eventname",
              "value": "Renewal Template New"
            }
          ]
        },
        "options": {}
      },
      "name": "Configure Event Name",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -2320,
        -380
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://api-ga-medredtrmn-dev.cardinality.info/api/emailtemplate/event-process/item",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{JSON.stringify($node[\"Process Items\"].json)}}"
      },
      "name": "Save Event Process Item",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2340,
        140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "3",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "//console.log('item', items)\nvar data= [];\nitems.map(item=>{\nvar itemdata = {\nstatus: \"IN PROGRESS\",\neventid: \"1\",\nexternalid:  item.json.Client_id,\nexecutionid: $executionId,\nchannel: \"PRINT\",\npayload: item.json,\neventprocessid: $node[\"Save Event Process\"].json.data.id\n}\ndata.push(itemdata);\n})\n\nreturn data.map(item => {\n    return {\"json\": item};\n});\n\n"
      },
      "name": "Process Items",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2620,
        140
      ]
    },
    {
      "parameters": {
        "functionCode": "var data =[];\nconsole.log(\"item id\",+$node[\"Save Event Process Item\"]);\nconst record_count = items.length;\nitems.map(item=>{\n console.log('item33', item.json)\n  var eachdata = {\n  \"member_id\": item.json.data.externalid,\n  \"zip\": item.json.data.payload.Zip,\n  \"zip_ext\": item.json.data.payload.Zip,\n  \"address_1\": item.json.data.payload.Client_Address_1,\n  \"address_2\": item.json.data.payload.Client_Address_2,\n  \"event_process_item_id\":item.json.data.id,\n  \"event_process_id\": $node[\"Save Event Process\"].json.data.id,\n  \"payload\" : item.json.data.payload\n  }\n  data.push(eachdata );\n})\nreturn data.map(item=>{\nreturn {\"json\": item};\n})\n"
      },
      "name": "Address Matching Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2040,
        140
      ]
    },
    {
      "parameters": {
        "functionCode": "\nvar data =[];\n\nconsole.log(\"itemsssss \",$node[\"Fetch Notification Data\"].json);\nconst record_count = items.length;\nitems.map(item=>{\nconsole.log('KEYS',item.json[Object.keys(item.json)[1]]);\n  //item.json.filename = item.json.Case_id+'_'+(new Date()).getTime()+'_'+new Date().toISOString().slice(0, 10).split('-').reverse().join('')+\".pdf\";\n  item.json.status = $node[\"Configure Event Name\"].json[\"eventname\"];\n  item.json.input_location= $node[\"Get Notification eventpath\"].json[\"data\"][0][\"path\"]+\"processed/\"+$node[\"Get File Path\"].json.name;\n  //item.json.file_name = $node[\"Get File Path\"].json.name; //$node[\"File Download\"].json.path;\n  item.json.event_process_id =  $node[\"Save Event Process\"].json?.data?.id;\n  item.json.record_count = record_count;\n  item.json.language= item.json.payload?.language;\n  item.json.Print= item.json.payload?.Print;\n})\nreturn items\n/*\nconst arrayOfArrays = items;\n\nconst mergedArray = [].concat(...arrayOfArrays).filter(array => array.length > 0);\n\nconsole.log(mergedArray);\n\nreturn mergedArray;*/"
      },
      "name": "Write File Name & Event Name",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -2600,
        420
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "POST",
        "url": "https://api-ga-medredtrmn-dev.cardinality.info/api/address/matching",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{JSON.stringify($node[\"Address Matching Request\"].json)}}"
      },
      "name": "Address Matching",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1700,
        140
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "3",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "return [{json: {event_process_id : $node[\"Save Event Process\"].json.data.id}}]"
      },
      "name": "Set Event Process ID",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1440,
        140
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT * FROM  ga_healthcvg.addr_member_match WHERE event_process_id = {{$json[\"event_process_id\"]}}",
        "additionalFields": {
          "queryParams": "="
        }
      },
      "name": "Event Process Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -1200,
        140
      ],
      "credentials": {
        "postgres": {
          "id": "5",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "var data={};\nconst currentDate = new Date();\nconst totalRecordsCount = items.length;\nitems.map(item=>{\nconsole.log(item.json);\n  data = {\n  filename : $node[\"Get File Path\"].json.name,\n  process_begin : currentDate ,\n  process_end : null,\n  event_id : 1,\n  status: \"IN PROGRESS\",\n  record_count:totalRecordsCount,\n  id:$node[\"Save Event Process\"].json?.data?.id\n  }\n  \n})\nreturn [{\"json\": data}]\n"
      },
      "name": "Update Event Process Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1220,
        -120
      ]
    },
    {
      "parameters": {
        "authentication": "headerAuth",
        "requestMethod": "PATCH",
        "url": "=https://api-ga-medredtrmn-dev.cardinality.info/api/emailtemplate/event-process/{{$node[\"Update Event Process Request\"].json[\"id\"]}}",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{JSON.stringify($node[\"Update Event Process Request\"].json)}}"
      },
      "name": "Update Event Process",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1020,
        -120
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "3",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://ga-medredtrmn-n8n-dev.cardinality.info/webhook/generatepdf",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={{JSON.stringify($json)}}"
      },
      "name": "Trigger Generate PDF Flow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -2280,
        420
      ]
    },
    {
      "parameters": {
        "functionCode": "var processedFileName=$node[\"Get File Path\"];\nconsole.log('path ',($items(\"Get File Path\")));\nreturn $items(\"Get File Path\");"
      },
      "name": "Get File Path To Move",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1940,
        420
      ]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://ga-medredtrmn-n8n-dev.cardinality.info/webhook/trigger/compresspdf",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "={\n\"event_name\": \"{{$node[\"Configure Event Name\"].json[\"eventname\"]}}\",\n\"id\":\"{{$node[\"Save Event Process\"].json[\"data\"][\"id\"]}}\"\n}"
      },
      "name": "Trigger Compress As Tar Flow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -1460,
        600
      ]
    },
    {
      "parameters": {
        "functionCode": "if (Object.keys(items[0].json).length === 0) {\n  return [\n     {\n       json: {\n         results: 0,\n       }\n      }\n  ]\n}\nreturn [\n  {\n    json: {\n      results: items.length,\n    }\n  }\n];\n"
      },
      "name": "Merge Items Count",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1800,
        600
      ]
    }
  ],
  "settings": {},
  "staticData": null,
  "tags": [],
  "updatedAt": "2023-03-13T08:37:59.266Z"
}